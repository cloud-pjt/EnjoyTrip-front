name: Build and Push Vue Frontend to ECR
on:
  push:
    branches: [ "main" ]         # ➜ dev에 자동 반영 (빌드)
  workflow_dispatch:
    inputs:
      environment:
        description: "배포 환경 선택"
        required: true
        default: "prod"
        type: choice
        options: [ "prod" ]
      image_tag:
        description: "DEV 이미지 태그 (비워두면 최신 태그 자동 선택)"
        required: false
        type: string

jobs:
  build-dev:
    # DEV 환경: 실제 빌드 + ECR 업로드
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: 255260635764.dkr.ecr.ap-northeast-2.amazonaws.com
      ECR_REPOSITORY: enjoy-front
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies and build
        run: |
          echo "VITE_KAKAO_MAP_API_SERVICE_KEY=${{ secrets.VITE_KAKAO_MAP_API_SERVICE_KEY }}" >> .env
          echo "VITE_VUE_API_URL=${{ secrets.VITE_VUE_API_URL }}" >> .env
          npm install
          npm run build
      
      - name: Get current time (KST)
        run: echo "IMAGE_TAG=$(TZ='Asia/Seoul' date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push to DEV ECR
        run: |
          docker build \
          --build-arg VITE_VUE_API_URL=${{ secrets.VITE_VUE_API_URL }} \
          -t $ECR_REPOSITORY:${{ env.IMAGE_TAG }} .
          docker tag $ECR_REPOSITORY:${{ env.IMAGE_TAG }} $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
          echo "✅ DEV 이미지 업로드 완료: $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}"
      
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: cloud-pjt/enjoy-cd
          token: ${{ secrets.GH_PAT }}
      
      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
      
      - name: Update DEV kustomization
        run: |
          cd frontend/overlays/dev
          kustomize edit set image $ECR_REGISTRY/$ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
          echo "📝 DEV kustomization 업데이트 완료"
          cat kustomization.yaml
      
      - name: Commit and push DEV changes  
        run: |
          git config user.name "sdpup"
          git config user.email "epflswu12@gmail.com"
          if ! git diff --quiet frontend/; then
            git add frontend/  # frontend 폴더만 추가
            git commit -m "🔧 Update DEV frontend image to ${{ env.IMAGE_TAG }}"
            git push
          else
            echo "No frontend changes to commit."
          fi
      
      - name: Display next steps
        run: |
          echo "🎉 DEV 배포 완료!"
          echo "📋 PROD 배포를 원한다면:"
          echo "   1. Actions 탭에서 'Build and Push Vue Frontend to ECR' 워크플로우 선택"
          echo "   2. 'Run workflow' 클릭"  
          echo "   3. Image tag에 입력: ${{ env.IMAGE_TAG }}"
          echo "   4. Environment: prod 선택 후 실행"

  promote-to-prod:
    # PROD 환경: DEV 이미지를 PROD ECR로 복사
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: 255260635764.dkr.ecr.ap-northeast-2.amazonaws.com
      DEV_REPOSITORY: enjoy-front
      PROD_REPOSITORY: enjoy-front-prod
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Determine image tag to promote
        id: tag
        run: |
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            # 사용자가 태그를 직접 입력한 경우
            IMAGE_TAG="${{ github.event.inputs.image_tag }}"
            echo "🎯 사용자 지정 태그 사용: $IMAGE_TAG"
          else
            # 최신 DEV 이미지 태그 자동 감지
            IMAGE_TAG=$(aws ecr describe-images \
              --repository-name $DEV_REPOSITORY \
              --region ap-northeast-2 \
              --query 'sort_by(imageDetails,&imagePushedAt)[-1].imageTags[0]' \
              --output text)
            echo "🔄 최신 DEV 이미지 태그 자동 선택: $IMAGE_TAG"
          fi
          
          # 태그가 유효한지 확인
          if [ "$IMAGE_TAG" = "null" ] || [ -z "$IMAGE_TAG" ]; then
            echo "❌ ERROR: DEV 레포지토리에서 유효한 이미지를 찾을 수 없습니다"
            exit 1
          fi
          
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "✅ 승격할 이미지 태그: $IMAGE_TAG"
      
      - name: Copy DEV image to PROD repository
        run: |
          IMAGE_TAG=${{ steps.tag.outputs.IMAGE_TAG }}
          echo "🔄 DEV 이미지를 PROD로 복사 중..."
          
          # DEV에서 이미지 Pull
          docker pull $ECR_REGISTRY/$DEV_REPOSITORY:$IMAGE_TAG
          
          # PROD 태그로 재태깅
          docker tag $ECR_REGISTRY/$DEV_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$PROD_REPOSITORY:$IMAGE_TAG
          
          # PROD ECR로 Push  
          docker push $ECR_REGISTRY/$PROD_REPOSITORY:$IMAGE_TAG
          
          echo "✅ 이미지 복사 완료:"
          echo "   FROM: $ECR_REGISTRY/$DEV_REPOSITORY:$IMAGE_TAG"
          echo "   TO:   $ECR_REGISTRY/$PROD_REPOSITORY:$IMAGE_TAG"
      
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: cloud-pjt/enjoy-cd
          token: ${{ secrets.GH_PAT }}
      
      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
      
      - name: Update PROD kustomization
        run: |
          IMAGE_TAG=${{ steps.tag.outputs.IMAGE_TAG }}
          cd frontend/overlays/prod
          kustomize edit set image $ECR_REGISTRY/$PROD_REPOSITORY=$ECR_REGISTRY/$PROD_REPOSITORY:$IMAGE_TAG
          echo "📝 PROD kustomization 업데이트 완료"
          cat kustomization.yaml
      
      - name: Commit and push PROD changes
        run: |
          git config user.name "sdpup"
          git config user.email "epflswu12@gmail.com"
          if ! git diff --quiet frontend/; then
            git add frontend/  # frontend 폴더만 추가
            git commit -m "🚀 Promote DEV image ${{ steps.tag.outputs.IMAGE_TAG }} to PROD"
            git push
            echo "✅ PROD 매니페스트 업데이트 완료"
          fi
      
      - name: Deployment summary
        run: |
          IMAGE_TAG=${{ steps.tag.outputs.IMAGE_TAG }}
          echo "🎉 PROD 배포 완료!"
          echo "📦 배포된 이미지: $ECR_REGISTRY/$PROD_REPOSITORY:$IMAGE_TAG"
          echo "🔗 DEV에서 검증된 동일한 이미지가 PROD에 배포되었습니다."
